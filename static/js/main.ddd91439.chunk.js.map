{"version":3,"sources":["serviceWorker.js","components/Grid/Grid.js","components/ArrowList/Arrolist.js","App.js","components/Labyrint/Labyrint.js","index.js"],"names":["Boolean","window","location","hostname","match","gridSizeRow","gridSizeColums","Grid","props","initialPosition","curentPositionsState","startGame","setStartGame","setInitialPosition","setArrowsDirection","useState","answer","setAnswer","reload","setReload","id","setId","rows","column","length","i","push","uuidv4","createStartGrid","useEffect","randomInteger","join","newReload","confirm","handleClick","event","target","setTimeout","map","row","indexRow","className","key","indexColumn","onClick","ArrowList","arrowsDirection","arrowLitem","index","direction","min","max","rand","Math","random","round","arrowDirectionName","1","2","3","4","App","arrowsDirectionFiled","currentPosition","item","Number","SetCurentPositionsState","type","newArrow","disabled","Labyrint","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddd91439.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useEffect, useState} from 'react';\r\nimport {randomInteger} from \"../../App\";\r\n\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\n\r\nconst gridSizeRow = [];\r\nconst gridSizeColums = [];\r\n\r\nfunction createStartGrid(rows, column) {\r\n    gridSizeRow.length = 0;\r\n    gridSizeColums.length = 0;\r\n\r\n    for(let i = 0; i < rows; i++) {\r\n        gridSizeRow.push({id:uuidv4()})\r\n    }\r\n    for(let i = 0; i < column; i++) {\r\n        gridSizeColums.push({id:uuidv4()})\r\n    }\r\n}\r\n\r\nexport const Grid = (props) => {\r\n    const { initialPosition, curentPositionsState, startGame, setStartGame, setInitialPosition, setArrowsDirection } = props;\r\n    const [answer, setAnswer] = useState(false);\r\n    const [reload, setReload] = useState(null);\r\n    const [id, setId] = useState(null);\r\n    createStartGrid(3,3);\r\n\r\n\r\n    useEffect(() => {\r\n        if(reload === true) {\r\n            setInitialPosition([randomInteger(1,3), randomInteger(1,3)].join(''));\r\n            setArrowsDirection([]);\r\n            setStartGame(true);\r\n            setReload(null)\r\n        } else if(reload === false) {\r\n            setStartGame(false);\r\n        }\r\n\r\n    }, [reload])\r\n\r\n    useEffect(() => {\r\n        let newReload = null;\r\n        if(id !== null){\r\n            if(id === curentPositionsState.join('')) {\r\n                // eslint-disable-next-line no-restricted-globals\r\n                newReload = confirm('Yuo won, want play again?');\r\n            } else {\r\n                // eslint-disable-next-line no-restricted-globals\r\n                newReload = confirm('Yuo loose, want play again?');\r\n            }\r\n            setReload(newReload);\r\n            setAnswer(false);\r\n        }\r\n    }, [id])\r\n\r\n\r\n    const handleClick = (event) => {\r\n        const {target} = event;\r\n        if(startGame === false && reload === null) {\r\n            setAnswer(true);\r\n            setTimeout(() => {\r\n                setId(target.id);\r\n            }, 100)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                gridSizeRow.map((row, indexRow) => (\r\n                   <div className=\"grid-row\" key={row.id}>\r\n                       {\r\n                           gridSizeColums.map((column, indexColumn) => (\r\n                               <div\r\n                                   key={column.id}\r\n                                   onClick={handleClick}\r\n                                   className={\r\n                                       `grid-column\r\n                                       ${initialPosition ===  `${indexRow + 1}${indexColumn + 1}`? 'active': ''}\r\n                                       ${(curentPositionsState.join('') ===  `${indexRow + 1}${indexColumn + 1}`) && answer ? 'right-answer': ''}\r\n                                       }`\r\n                                   }\r\n                                   id={`${indexRow + 1}${indexColumn + 1}`}\r\n                               >\r\n                               </div>\r\n                           ))\r\n                       }\r\n                   </div>\r\n               ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport './ArrwoList.css';\r\n\r\n\r\nexport const ArrowList = ({arrowsDirection}) => {\r\n\r\n    return (\r\n        <div className=\"arrow-container\">\r\n            {\r\n                arrowsDirection.map((arrowLitem, index) => (\r\n                    <div\r\n                        key={arrowLitem.id}\r\n                        className={`arrow-item arrow-${arrowLitem.direction}`}\r\n                        id={`arrow-${arrowLitem.direction}`}\r\n                    >\r\n\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nimport { Grid } from \"./components/Grid/Grid\";\nimport {ArrowList} from \"./components/ArrowList/Arrolist\";\n\nexport function randomInteger(min, max) {\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\n    return Math.round(rand);\n}\n\nconst arrowDirectionName = {\n    1: 'up',\n    2: 'down',\n    3: 'left',\n    4: 'right',\n};\n\nfunction App({ initialPosition, setInitialPosition }) {\n    const arrowsDirectionFiled = [];\n    let currentPosition = [...initialPosition].map(item => Number(item));\n\n    const [arrowsDirection, setArrowsDirection] = useState([]);\n    const [curentPositionsState, SetCurentPositionsState] = useState([]);\n    const [startGame, setStartGame] = useState(null);\n\n\n    const hadleStart = () => {\n        if(startGame !== false) {\n            setStartGame(true);\n\n            while(arrowsDirectionFiled.length < 10) {\n                const newArrow = randomInteger(1,4);\n\n                if(arrowDirectionName[newArrow] === 'up') {\n                    if ((currentPosition[0] - 1) >= 1 ) {\n                        currentPosition[0] -=1;\n                        arrowsDirectionFiled.push({\n                            id: uuidv4(),\n                            direction: 'up',\n                        });\n                    }\n                }\n\n                if (arrowDirectionName[newArrow] === 'down') {\n                    if ((currentPosition[0] + 1) <= 3 ) {\n                        currentPosition[0] += 1;\n                        arrowsDirectionFiled.push({\n                            id: uuidv4(),\n                            direction: 'down',\n                        });\n                    }\n                }\n\n                if(arrowDirectionName[newArrow] === 'left') {\n                    if ((currentPosition[1] - 1) >= 1) {\n                        currentPosition[1] -= 1;\n                        arrowsDirectionFiled.push({\n                            id: uuidv4(),\n                            direction: 'left',\n                        });\n                    }\n                }\n\n                if(arrowDirectionName[newArrow] === 'right') {\n                    if ((currentPosition[1] + 1) <= 3 ) {\n                        currentPosition[1] += 1;\n                        arrowsDirectionFiled.push({\n                            id: uuidv4(),\n                            direction: 'right',\n                        });\n                    }\n                }\n            }\n            setArrowsDirection(arrowsDirectionFiled);\n            SetCurentPositionsState(currentPosition);\n        }\n        setStartGame(false);\n    };\n\n  return (\n    <div className=\"app\">\n      <div className=\"grid-button-container\">\n          <button\n              type=\"button\"\n              onClick={hadleStart}\n              className=\"start-game-btn\"\n              disabled={(startGame === null) || startGame ? false : true}\n          >\n              Start\n          </button>\n\n          <div>\n              <Grid\n                  initialPosition={initialPosition}\n                  setInitialPosition={setInitialPosition}\n                  curentPositionsState={curentPositionsState}\n                  startGame={startGame}\n                  setStartGame={setStartGame}\n                  setArrowsDirection={setArrowsDirection}\n              />\n              <ArrowList arrowsDirection={arrowsDirection} />\n          </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React, {useState} from 'react';\r\n\r\nimport App from '../../App';\r\nimport { randomInteger } from \"../../App\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\n\r\n\r\nconst Labyrint = () => {\r\n    const [initialPosition, setInitialPosition] = useState([randomInteger(1,3), randomInteger(1,3)].join(''));\r\n    return (\r\n        <App\r\n            initialPosition={initialPosition}\r\n            setInitialPosition={setInitialPosition}\r\n        />\r\n    )\r\n};\r\n\r\nexport default Labyrint;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Labyrint from \"./components/Labyrint/Labyrint\";\n\nReactDOM.render(\n    <Labyrint />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}